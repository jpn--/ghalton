{% set name = "ghalton" %}
{% set version = "0.6.2" %}
{% set hash_type = "sha256" %}
{% set hash_value = "deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.tar.gz'
  url: https://github.com/jpn--/{{ name }}/archive/{{ version }}.tar.gz
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: python setup.py install  --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python {{ python }}
    - setuptools
  run:
    - python {{ python }}

test:
  imports:
    - ghalton

about:
  home: https://github.com/fmder/ghalton
  license: GNU Library or Lesser General Public License (LGPL)
  license_family: LGPL
  license_file: ''
  summary: Generalized Halton number generator
  description: "Generalized Halton Number Generator\n===================================\n\nThis library allows to generate quasi-random numbers according to the\ngeneralized Halton sequence. For more information\
    \ on Generalized Halton\nSequences, their properties, and limits see Braaten and Weller (1979), Faure\nand Lemieux (2009), and De Rainville et al. (2012) and reference therein.\n\nThe library is compatible\
    \ Python 2 and Python 3.\n\nInstall with `pip`\n------------------\nSimply type in\n\n    $ pip install ghalton\n\n\nBuilding the Code\n-----------------\nTo build the code you'll need a working C++\
    \ compiler. \n\n    $ python setup.py install\n\nUsing the Library\n-----------------\nThe library contains two generators one producing the standard Halton sequence\nand the other a generalized version\
    \ of it. The former constructor takes a\nsingle argument, which is the dimensionalty of the sequence.\n\n    import ghalton\n    sequencer = ghalton.Halton(5)\n\nThe last code will produce a sequence\
    \ in five dimension. To get the points use\n\n    points = sequencer.get(100)\n\nA list of 100 lists will be produced, each sub list will containt 5 points\n\n    print points[0]\n    # [0.5, 0.3333,\
    \ 0.2, 0.1429, 0.0909]\n\nThe halton sequence produce points in sequence, to reset it call\n`sequencer.reset()`.\n\nThe generalised Halton sequence constructor takes at least one argument,\neither the\
    \ dimensionality, or a configuration. When the dimensionality is\ngiven, an optional argument can be used to seed for the random permutations\ncreated.\n\n    import ghalton\n    sequencer = ghalton.GeneralizedHalton(5,\
    \ 68)\n    points = sequencer.get(100)\n    print points[0]\n    # [0.5, 0.6667, 0.4, 0.8571, 0.7273]\n\nA configuration is a series of permutations each of *n_i* numbers,\nwhere *n_i* is the *n_i*'th\
    \ prime number. The dimensionality is infered from\nthe number of sublists given.\n\n    import ghalton\n    perms = ((0, 1),\n             (0, 2, 1),\n             (0, 4, 2, 3, 1),\n             (0,\
    \ 6, 5, 4, 3, 2, 1),\n             (0, 8, 2, 10, 4, 9, 5, 6, 1, 7, 3))\n    sequencer = ghalton.GeneralizedHalton(perms)\n    points = sequencer.get(100)\n    print points[0]\n    # [0.5, 0.6667, 0.8,\
    \ 0.8571, 0.7273]\n\nThe configuration presented in De Rainville et al. (2012) is available in the\nghalton module. Use the first *dim* dimensions of the `EA_PERMS` constant.\nThe maximum dimensionality\
    \ provided is 100.\n\n    import ghalton\n    dim = 5\n    sequencer = ghalton.GeneralizedHalton(ghalton.EA_PERMS[:dim])\n    points = sequencer.get(100)\n    print points[0]\n    # [0.5, 0.6667, 0.8,\
    \ 0.8571, 0.7273]\n\nThe complete API is presented [here](http://vision.gel.ulaval.ca/~fmdrainville/doc/python/index.html).\n\nConfiguration Repository\n------------------------\nSee the [Quasi Random\
    \ Sequences Repository](http://qrand.gel.ulaval.ca) for more configurations. \n\nReferences\n----------\nE. Braaten and G. Weller. An improved low-discrepancy sequence for multidi-\nmensional quasi-Monte\
    \ Carlo integration. *J. of Comput. Phys.*,\n33(2):249-258, 1979.\n\nF.-M. De Rainville, C. Gagn\xE9, O. Teytaud, D. Laurendeau. Evolutionary\noptimization of low-discrepancy sequences. *ACM Trans.\
    \ Model. Comput. Simul.*,\n22(2):1-25, 2012.\n\nH. Faure and C. Lemieux. Generalized Halton sequences in 2008: A comparative\nstudy. *ACM Trans. Model. Comput. Simul.*, 19(4):1-43, 2009."
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''

